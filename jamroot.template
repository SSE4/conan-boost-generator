import boostcpp ;
import modules ;
path-constant BOOST_ROOT : . ;
constant BOOST_VERSION : {{{boost_version}}} ;
constant BOOST_JAMROOT_MODULE : $(__name__) ;
boostcpp.set-version $(BOOST_VERSION) ;
local DEP_INCLUDES = {{{deps.include_paths}}} ;
project boost
:   requirements
    # [ boostcpp.architecture ]
    # [ boostcpp.address-model ]
    <define>BOOST_ALL_NO_LIB=1
    <tag>@$(__name__).tag
    <link>shared,<runtime-link>static:<build>no
    <toolset>como:<link>static
    <toolset>como-linux:<define>_GNU_SOURCE=1
    <include>$(DEP_INCLUDES)
    <include>{{{library}}}/include
:   build-dir bin
:   default-build
    <target-os>{{{os}}}
    <address-model>{{{address_model}}}
    <architecture>{{{architecture}}}
;
rule tag ( name : type ? : property-set )
{
    return [ boostcpp.tag $(name) : $(type) : $(property-set) ] ;
}
rule boost-install ( libraries * )
{
    install stage : $(libraries) : <location>output ;
    module [ CALLER_MODULE ] { explicit stage ; }
}
use-project /boost/{{{library}}} : {{{library}}}/build ;
module boostcpp
{
IMPORT alias : alias : $(__name__) : __alias__ ;
rule alias ( name : sources * : requirements * : default-build * :
    usage-requirements * )
{
    if $(sources) = libs/%(library)s/build { sources = {{{library}}}/build ; }
    return [ __alias__ $(name) : $(sources) : $(requirements)
        : $(default-build) : $(usage-requirements) ] ;
}
}
boostcpp.declare-targets {{{library}}}s ;
